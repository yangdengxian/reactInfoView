'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _express = require('express');

var _express2 = _interopRequireDefault(_express);

var _http = require('http');

var _http2 = _interopRequireDefault(_http);

var _https = require('https');

var _https2 = _interopRequireDefault(_https);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var factory = function factory() {

    var buildServer = function buildServer(props) {
        var server = props.server;
        var serverApp = props.serverApp;
        var host = props.host;
        var port = props.port;
        var protocol = props.protocol;
        var children = props.children;


        var serverInstance = new server[protocol](serverApp);

        var config = {
            host: host,
            port: port,
            protocol: protocol
        };

        return {
            server: serverInstance,
            serverApp: serverApp,
            config: config,
            children: children
        };
    };

    var ReactServer = function (_Component) {
        _inherits(ReactServer, _Component);

        function ReactServer() {
            _classCallCheck(this, ReactServer);

            return _possibleConstructorReturn(this, Object.getPrototypeOf(ReactServer).apply(this, arguments));
        }

        return ReactServer;
    }(_react.Component);

    ReactServer.propTypes = {
        host: _react.PropTypes.string.isRequired,
        port: _react.PropTypes.oneOfType([_react.PropTypes.number, _react.PropTypes.string]).isRequired,
        serverApp: _react.PropTypes.func.isRequired,
        server: _react.PropTypes.object.isRequired
    };
    ReactServer.defaultProps = {
        host: 'localhost',
        port: 3000,
        protocol: 'http',
        server: { http: _http2.default.Server, https: _https2.default.Server },
        serverApp: new _express2.default()
    };
    ReactServer.buildServer = buildServer;


    return ReactServer;
};

exports.default = factory();
module.exports = exports['default'];